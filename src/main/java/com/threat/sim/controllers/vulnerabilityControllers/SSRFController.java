package com.threat.sim.controllers.vulnerabilityControllers;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.Arrays;
import java.util.stream.Collectors;

@RestController
public class SSRFController {
    //curl http://localhost:8080/ssrf/path?url=file:src/main/java/com/threat/sim/JDBCBuilder.java --output -
    //curl http://localhost:8080/ssrf/path?url=file:src/main/java/com/threat/sim/JDBCBuilder.java --output -
    //curl http://localhost:8080/ssrf/path?url=file:///C:/dump.sql --output -
    @GetMapping("/ssrf/path")
    @ResponseBody
    public String ssrf(@RequestParam String url){
        try{
            return fetchRemoteDoc(url);
        }catch (Exception e){
            return e + Arrays.toString(e.getStackTrace());
        }

    }
    String fetchRemoteDoc(String remoteUrl) throws Exception {
        URL url = new URL(remoteUrl);
        URLConnection connection = url.openConnection();
        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
        String body = reader.lines().collect(Collectors.joining());
        return body;
    }
}
