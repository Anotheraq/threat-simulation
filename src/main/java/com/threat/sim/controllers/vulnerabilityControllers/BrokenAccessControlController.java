package com.threat.sim.controllers.vulnerabilityControllers;

import com.threat.sim.models.UserBAC;
import com.threat.sim.repositories.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.bind.support.SessionStatus;

@Controller
@SessionAttributes("user")
public class BrokenAccessControlController {
    @Autowired
    UserRepository userRepository;
    @GetMapping(value = "/login")
    public String bac() {
        return "login";
    }
    @GetMapping(value = "/mainpage")
    public String bacMain(Model model,
                          @ModelAttribute(name = "user") UserBAC user){
        if(user==null){
            return "redirect:/login";
        }
        model.addAttribute("username", user.getUsername());
        model.addAttribute("isadmin", user.isAdmin());
        return "bac-main";
    }
    @GetMapping(value = "/userpage")
    public String bacUser(Model model,
                          @ModelAttribute(name="user") UserBAC user){
        if(user==null){
            return "redirect:/login";
        }
        model.addAttribute("username", user.getUsername());
        model.addAttribute("isadmin", user.isAdmin());
        return "bac-user";
    }
    @GetMapping(value = "/adminpage")
    public String bacAdmin(Model model,
                           @ModelAttribute(name = "user") UserBAC user){
        if(user==null){
            return "redirect:/login";
        }
        model.addAttribute("username", user.getUsername());
        return "bac-admin";
    }

    @GetMapping(value = "/securedadminpage")
    public String secAdmin(Model model,
                           @ModelAttribute(name = "user") UserBAC user){
        if(user==null){
            return "redirect:/login";
        }
        if(!user.isAdmin()){
            return "redirect:/mainpage";
        }
        model.addAttribute("username", user.getUsername());
        return "secured-admin-page";
    }



    @PostMapping(value = "/login")
    public String bac(Model model,
                       @RequestParam("username") String username,
                       @RequestParam("password") String password,
                       @ModelAttribute(name = "user")UserBAC user) {
        if(user!=null){
            return "redirect:/mainpage";
        }
        if(username.isEmpty() || password.isEmpty()){
            model.addAttribute("message", "Please fill all inputs");
            return "login";
        }
        UserBAC userBAC = userRepository.getBACUser(username, password);
        if(userBAC == null){
            model.addAttribute("message", "User does not exist");
            return "login";
        }
        user.setAdmin(userBAC.isAdmin());
        user.setPassword(userBAC.getPassword());
        user.setUsername(userBAC.getUsername());
        model.addAttribute("username", user.getUsername());
        model.addAttribute("isadmin", user.isAdmin());
        return "bac-main";
    }

    @PostMapping("/logout")
    public String logout(
            Model model,
            SessionStatus statusl,
            @ModelAttribute(name = "user")UserBAC user
    ){
        if(user == null){
            return "redirect:/login";
        }
        return "redirect:/login";
    }
    @ModelAttribute("user")
    public UserBAC user(){
        return new UserBAC();
    }
}
